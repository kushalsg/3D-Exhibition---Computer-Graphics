#include<stdio.h>
#include <windows.h>
#include <GL/glut.h>
#include<math.h>
/* Initialize OpenGL Graphics */
doublewinHt=4.0;
constint GWHEEL_RING=3, GWHEEL_TROLLEY=4, GWHEEL_TOP=5;
intgw=0, gwheel_ring_color=0, gwheel_trolley_color=0;
GLdoublecurr=0, prev=0, gw_spin = 0.0, angle=0.0, c_angle=90.0, gw_width = 8.0, gw_radius=45.0,
gw_x=-180.0, gw_y=50.0, gw_z=220.0, co_x=180.0, co_y=0.0, co_z=80.0, lx=50.0, ly=50.0, lz=50.0,
gy=0;
void renderCylinder(float x1, float y1, float z1, float x2,float y2, float z2, float 
radius,intsubdivisions,GLUquadricObj *quadric)
{
floatvx = x2-x1,vy = y2-y1,vz = z2-z1;
if(vz == 0) vz = .0001;
float v = sqrt( vx*vx + vy*vy + vz*vz );
float ax = 57.2957795*acos( vz/v );
if ( vz< 0.0 )
ax = -ax;
floatrx = -vy*vz;
floatry = vx*vz;
glPushMatrix();
glTranslatef(x1,y1,z1 );
glRotatef(ax, rx, ry, 0.0);
gluQuadricOrientation(quadric,GLU_OUTSIDE);
gluCylinder (quadric, radius, radius, v, subdivisions, 1);
gluQuadricOrientation(quadric,GLU_INSIDE);
gluDisk(quadric, 0.0, radius, subdivisions, 1);
glTranslatef(0,0,v );
gluQuadricOrientation(quadric,GLU_OUTSIDE);
gluDisk(quadric, 0.0, radius, subdivisions, 1);
glPopMatrix();
}
voiddraw_cyl(float x1, float y1, float z1, float x2,float y2, float z2, float radius,int subdivisions)
{
 //glColor3f (0.6,0.6,0);
GLUquadricObj *quadric=gluNewQuadric();
gluQuadricNormals(quadric, GLU_SMOOTH);
renderCylinder (x1, y1, z1, x2, y2, z2, radius, subdivisions, quadric);
gluDeleteQuadric(quadric);
}
voidset_material(int m)
{
if(m==0)
{
float materialGrey [] = {0.8,0.8,0.8}, materialWhite [] = {0.2,0.2,0.2};
glMaterialfv(GL_FRONT_AND_BACK,GL_DIFFUSE,materialGrey);
glMaterialfv(GL_FRONT_AND_BACK,GL_AMBIENT,materialWhite);
}
if(m==GWHEEL_RING)
{ float materialColours[][3]={{0.8,0.8,0.0},{0.33,0.33,0.33}, {0.9,0.4,0.4} 
,{0.5450,0.27,0}, 
{0.36,0.36,0.36}},materialLightBr[][3]={{0,0,0},{0.3,0.3,0.3},{0,0,0},{0,0,0},{0.0,0.0,0.0}};
glMaterialfv(GL_FRONT_AND_BACK,GL_DIFFUSE,materialColours[gwheel_ring_color]);
glMaterialfv(GL_FRONT_AND_BACK,GL_AMBIENT,materialLightBr[gwheel_ring_color]);
}
if(m==GWHEEL_TROLLEY)
{ float materialColours[][3]={{0.2,0.2,0.8},{0.8,0.8,0.0},{0.33,0.33,0.33}, {0.9,0.4,0.4} 
,{0.5450,0.27,0}},materialLightBr[]={0.1,0.1,0.1};
glMaterialfv(GL_FRONT_AND_BACK,GL_DIFFUSE,materialColours[gwheel_trolley_color]);
glMaterialfv(GL_FRONT_AND_BACK,GL_AMBIENT,materialLightBr);
}
}
voiddraw_seat()
{
glPushMatrix();
//glEnable(GL_LIGHTING);
glTranslatef(1.0, 0.0, -1.0);
glRotatef(90.0, 0.0, 0.0, 1.0);
glTranslatef(0.0, 0.5, 0.0);
//glColor3f(0.2,0.2,1);
draw_cyl(-2.5,0.0,0.0,2.5,0.0,0.0,0.05,6);
glTranslatef(0.0,-0.5,0.0);
glNormal3f(0.0,1.0,0.0);
//glColor3f(1,0,0);
glScalef(4.0, 0.1, 1.0);
glColor3f(1,1,1);
glutSolidCube(1.0);
glScalef(1/4.0, 1/0.1, 1.0);
glTranslatef(0.0, 0.5, -1.0);
glRotatef(80.0, 1.0, 0.0, 0.0);
glScalef(4.0, 0.1, 1.0);
glNormal3f(0.0,1.0,0.0);
glutSolidCube(1.0);
glScalef(1/4.0, 1/0.1, 1.0);
glPopMatrix();
}
voidinitGL()
{
glClearColor(0.0f, 0.7f, 1.0f, 0.0f); // Set background color to black and opaque
glClearDepth(1.0f); // Set background depth to farthest
glEnable(GL_DEPTH_TEST); // Enable depth testing for z-culling
glDepthFunc(GL_LEQUAL); // Set the type of depth-test
glShadeModel(GL_SMOOTH); // Enable smooth shading
glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST); // Nice perspective corrections
}
voiddraw_wagon(){
GLdoublewagon_size=5.0;
doubleeqn[]={0.0, -1.0, 0.0, -3.5};
glPushMatrix();
glTranslatef(0.0, -5.0, 0.0);
//glEnable(GL_CLIP_PLANE0);
//glClipPlane(GL_CLIP_PLANE0, eqn);
//glEnable(GL_LIGHTING);
//glEnable(GL_DEPTH_TEST);
//glEnable(GL_NORMALIZE);
//glDisable(GL_CLIP_PLANE0);
for(int c=0;c<4;c++)
{
glRotatef((90/4.0), 0.0, 1.0, 0.0);
glNormal3f(1.0,0.0,0.0);
glColor3f(0.4,0.4,1);
glutWireCube(wagon_size*2.0);
}
glPushMatrix();
glRotatef(-90.0, 1.0, 0.0, 0.0);
glRotatef(90.0, 0.0, 0.0, 1.0);
glScalef(2.0, 3.0, 2.0);
//set_material(0);
//glColor3f(0.2,0.2,1);
draw_seat();
set_material(GWHEEL_TROLLEY);
glScalef(1/2.0,1/3.0,1/2.0);
glRotatef(90.0, 1.0, 0.0, 0.0);
glPopMatrix();
glTranslatef(0.0, wagon_size, 0.0);
glRotatef(-90.0, 1.0, 0.0, 0.0);
glColor3f(0.4,0.4,1);
glutSolidCone(5.0, 5.0, 6,6);
glColor3f(0.4,0.4,1);
glRotatef(90.0, 1.0, 0.0, 0.0);
glTranslatef(0.0, -2*wagon_size, 0.0);
glRotatef(-90.0, 1.0, 0.0, 0.0);
GLUquadricObj *quadric=gluNewQuadric();
gluQuadricNormals(quadric, GLU_SMOOTH);
gluDisk(quadric, 0.0, 6.0, 16.0, 1.0);
gluDeleteQuadric(quadric);
glDisable(GL_LIGHTING);
glDisable(GL_NORMALIZE);
glPopMatrix();
}
int theta;
void spin()
{
theta=theta+3.0;
if(theta>=360)theta-=360;
glutPostRedisplay();
}
voiddrawgwstand()
{
intnum=12;
GLUquadricObj *quadric=gluNewQuadric();
gluQuadricNormals(quadric, GLU_SMOOTH);
glPushMatrix();
glTranslatef(0.0,0.0, 10);
glRotatef(-gw_spin,0,0,1);
glColor3f(0.4,0.2,0);
draw_cyl(0,0,0,0,-55,20,1.5,8);
glTranslatef(0.0,0.0, -22);
draw_cyl(0,0,0,0,-55,-20,1.5,8);
set_material(0);
glPopMatrix();
glDisable(GL_LIGHT1);
}
staticGLfloat theta1[]={0.0,0.0,0.0};
GLint axis =1;
void compound()
{
glColor3f(.7, .6, 0.0);
glPushMatrix();
glTranslated(0.0,0.0,0.0);
glutSolidSphere(0.15,50,50);
glPopMatrix();
glPushMatrix();
glRotated(-90,1,0,0);
glutSolidCone(0.08,0.5,100,100);
glPopMatrix();
glPushMatrix();
glRotated(90,1,0,0);
glutSolidCone(0.08,0.5,10,100);
glPopMatrix();
glPushMatrix();
glTranslated(0.0,-0.5,0.0);
glutSolidSphere(0.15,50,50);
glPopMatrix();
glPushMatrix();
glTranslated(0.0,0.5,0.0);
glutSolidSphere(0.15,50,50);
glPopMatrix();
for(float x=0.5;x<=1.5;x+=0.5)
{
glPushMatrix();
glTranslated(x,0.0,0.0);
glutSolidSphere(0.15,50,50);
glPopMatrix();
glPushMatrix();
glTranslated(x,0.0,0.0);
glRotated(-90,1,0,0);
glutSolidCone(0.08,0.5,100,100);
glPopMatrix();
glPushMatrix();
glTranslated(x,0.0,0.0);
glRotated(90,1,0,0);
glutSolidCone(0.08,0.5,10,100);
glPopMatrix();
glPushMatrix();
glTranslated(x,-0.5,0.0);
glutSolidSphere(0.15,50,50);
glPopMatrix();
glPushMatrix();
glTranslated(x,0.5,0.0);
glutSolidSphere(0.15,50,50);
glPopMatrix();
glPushMatrix();
glTranslated(-x,0.0,0.0);
glutSolidSphere(0.15,50,50);
glPopMatrix();
glPushMatrix();
glTranslated(-x,0.0,0.0);
glRotated(-90,1,0,0);
glutSolidCone(0.08,0.5,100,100);
glPopMatrix();
glPushMatrix();
glTranslated(-x,0.0,0.0);
glRotated(90,1,0,0);
glutSolidCone(0.08,0.5,10,100);
glPopMatrix();
glPushMatrix();
glTranslated(-x,-0.5,0.0);
glutSolidSphere(0.15,50,50);
glPopMatrix();
glPushMatrix();
glTranslated(-x,0.5,0.0);
glutSolidSphere(0.15,50,50);
glPopMatrix();
}
glPushMatrix();
glColor3f(0.7,0.7,0.7);
glTranslated(0.0,0.6,0.0);
glScaled(3.5,0.2,0.3);
glutSolidCube(1.0);
glPopMatrix();
glPushMatrix();
glColor3f(0.7,0.7,0.7);
glTranslated(0.0,-1.6,0.0);
glScaled(3.5,2,0.3);
glutSolidCube(1.0);
glPopMatrix();
}
voiddrawTop()
{
glBegin(GL_QUADS); // Begin drawing the pyramid with 4 OUADS
 // Front
glColor3f(0.858824, 0.858824, 0.439216);
glNormal3f(-1.0f, 0.4f, 1.0f);
glVertex3f(-1.0f, 0.4f, 1.0f);
glColor3f(0.8, 0.498039, 0.196078);
glNormal3f(-0.2f, 1.0f, 0.2f);
glVertex3f(-0.2f, 1.0f, 0.2f);
glColor3f(0.8, 0.498039, 0.196078);
glNormal3f(0.2f, 1.0f, 0.2f);
glVertex3f(0.2f, 1.0f, 0.2f);
glColor3f(0.858824, 0.858824, 0.439216);
glNormal3f(1.0f, 0.4f, 1.0f);
glVertex3f(1.0f, 0.4f, 1.0f);
 // Back
glColor3f(0.858824, 0.858824, 0.439216);
glNormal3f(-1.0f, 0.4f, -1.0f);
glVertex3f(-1.0f, 0.4f, -1.0f);
glColor3f(0.8, 0.498039, 0.196078);
glNormal3f(-0.2f, 1.0f, -0.2f);
glVertex3f(-0.2f, 1.0f, -0.2f);
glColor3f(0.8, 0.498039, 0.196078);
glNormal3f(0.2f, 1.0f,-0.2f);
glVertex3f(0.2f, 1.0f, -0.2f);
glColor3f(0.858824, 0.858824, 0.439216);
glNormal3f(1.0f, 0.4f, -1.0f);
glVertex3f(1.0f, 0.4f, -1.0f);
 // Left
glColor3f(0.858824, 0.858824, 0.439216);
glNormal3f(-1.0f, 0.4f, -1.0f);
glVertex3f(-1.0f, 0.4f, -1.0f);
glColor3f(0.8, 0.498039, 0.196078);
glNormal3f(-0.2f, 1.0f, -0.0f);
glVertex3f(-0.2f, 1.0f,-0.2f);
glColor3f(0.8, 0.498039, 0.196078);
glNormal3f(-0.2f,1.0f,0.2f);
glVertex3f(-0.2f, 1.0f,0.2f);
glColor3f(0.858824, 0.858824, 0.439216);;
glNormal3f(-1.0f, 0.4f, 1.0f);
glVertex3f(-1.0f, 0.4f, 1.0f);
 // Right
glColor3f(0.858824, 0.858824, 0.439216);
glNormal3f(1.0f, 0.4f, 1.0f);
glVertex3f(1.0f, 0.4f,1.0f);
glColor3f(0.8, 0.498039, 0.196078);
glNormal3f(0.2f, 1.0f, 0.2f);
glVertex3f(0.2f, 1.0f, 0.2f);
glColor3f(0.8, 0.498039, 0.196078);
glNormal3f(0.2f,1.0f,-0.2f);
glVertex3f(0.2f, 1.0f, -0.2f);
glColor3f(0.858824, 0.858824, 0.439216);
glNormal3f(1.0f, 0.4f,-1.0f);
glVertex3f(1.0f, 0.4f, -1.0f);
glEnd();
}
voiddrawstoll()
{
glPushMatrix();
glColor3f(1,0.498039,0.0);
glRotated(230,0,1,0);
glTranslated(0.0,-1.0,0.0);
glutSolidCube(1.0);
glPopMatrix();
glPushMatrix();
glColor3f(0.6,0.0,0.0);
glTranslated(0.0,-1.0,0.0);
drawTop();
glPopMatrix();
}
void drawstoll1()
{
glPushMatrix();
glColor3f(0.42,0.26,.45);
glRotated(230,0,1,0);
glTranslated(0.0,-1.0,0.0);
glutSolidCube(1.0);
glPopMatrix();
glPushMatrix();
glColor3f(0.6,0.0,0.0);
glTranslated(0.0,-1.0,0.0);
drawTop();
glPopMatrix();
}
void drawstoll2()//entrance
{
glPushMatrix();
glColor3f(0.858824,0.576471,0.439216);
glRotated(230,0,1,0);
glTranslated(0.0,-1.0,0.0);
glutSolidCube(1.0);
glPopMatrix();
glPushMatrix();
glColor3f(0.6,0.0,0.0);
glTranslated(0.0,-1.0,0.0);
drawTop();
glPopMatrix();
}
void drawstoll3()//left last
{
glPushMatrix();
glColor3f(0.196078,0.8,0.196078);
glRotated(230,0,1,0);
glTranslated(0.0,-1.0,0.0);
glutSolidCube(1.0);
glPopMatrix();
glPushMatrix();
glColor3f(0.6,0.0,0.0);
glTranslated(0.0,-1.0,0.0);
drawTop();
glPopMatrix();
}
voiddrawcanteen()
{
glPushMatrix();
glColor3f(2.0,2.0,2.0);
glRotated(230,0,1,0);
glTranslated(0.0,-1.0,0.0);
 //glScaled(0.2,2.0,0.2);
glutSolidCube(1.0);
glPopMatrix();
glPushMatrix();
glColor3f(0.2,0.0,0.0);
glTranslated(0.0,-1.0,0.0);
drawTop();
glPopMatrix();
}
void drawcanteen1()
{
glPushMatrix();
glColor3f(0.678431,0.917647,0.917647);
glRotated(230,0,1,0);
glTranslated(0.0,-1.0,0.0);
 //glScaled(0.2,2.0,0.2);
glutSolidCube(1.0);
glPopMatrix();
glPushMatrix();
glColor3f(0.2,0.0,0.0);
glTranslated(0.0,-1.0,0.0);
drawTop();
glPopMatrix();
}
voiddrawobject()
{
glPushMatrix();
glRotated(180,1,0,0);
glTranslated(0.5,0,1.0);
glScaled(1.5,-1.0,1.5);
glPushMatrix();//right corner
glColor3f(0.7,0.7,0.7);
glRotated(230,0,1,0);
glTranslated(-1.8,-1.0,4.0);
glScaled(0.5,0.7,0.5);
drawcanteen();
glPopMatrix();
glPushMatrix();//right second
glRotated(230,0,1,0);
glTranslated(0.2,-1.0,4.0);
glScaled(0.5,0.7,0.5);
drawcanteen1();
glPopMatrix();
glPushMatrix();//left stall
glRotated(230,0,1,0);
glTranslated(1.5,-1.0,0.5);
glScaled(0.5,0.5,0.5);
drawstoll();
glPopMatrix();
glPushMatrix();//centre stall
glRotated(230,0,1,0);
glTranslated(-1.8,-1.0,2.0);
glScaled(0.5,0.5,0.5);
drawstoll1();
glPopMatrix();
glPushMatrix();//entrance right
glRotated(230,0,1,0);
glTranslated(1.5,-1.0,3.5);
glScaled(0.5,0.5,0.5);
drawstoll2();
glPopMatrix();
glPushMatrix();//left last stall
glRotated(230,0,1,0);
glTranslated(-1.5,-1.0,0.2);
glScaled(0.5,0.5,0.5);
drawstoll3();
glPopMatrix();
glPushMatrix();
glColor3f(0.72,0.45,0.20);//base
glRotated(230,0,1,0);
glTranslated(0.0,-2.0,2.0);
glScaled(5,0.6,5.0);
glutSolidCube(1.0);
glPopMatrix();
for(float x=0.0;x<=1.5;x+=0.5)
 {
glPushMatrix();
glColor3f(1,0.8,0.0);
glRotated(230,0,1,0);
glTranslated(x,-1.2,-0.5);
glScaled(0.5,0.2,0.15);
compound();
glPopMatrix();
glPushMatrix();
glColor3f(1,0.8,0.0);
glRotated(230,0,1,0);
glTranslated(-x,-1.2,-0.5);
glScaled(0.5,0.2,0.15);
compound();
glPopMatrix();
 }
for(float x=0.0;x<=1.5;x+=0.5)
 {
glPushMatrix();
glColor3f(1,0.8,0.0);
glRotated(230,0,1,0);
glTranslated(x,-1.2,4.5);
glScaled(0.5,0.2,0.15);
compound();
glPopMatrix();
glPushMatrix();
glColor3f(1,0.8,0.0);
glRotated(230,0,1,0);
glTranslated(-x,-1.2,4.5);
glScaled(0.5,0.2,0.15);
compound();
glPopMatrix();
 }
glPushMatrix();
glTranslated(0.0,0,-3.1);
for(float x=0.0;x<=1.75;x+=0.25)
 {
glPushMatrix();
glColor3f(1,0.8,0.0);
glRotated(140,0,1,0);
glTranslated(x,-1.2,0);
glScaled(0.45,0.2,0.15);
compound();
glPopMatrix();
glPushMatrix();
glColor3f(1,0.8,0.0);
glRotated(140,0,1,0);
glTranslated(-x,-1.2,0);
glScaled(0.44,0.2,0.15);
compound();
glPopMatrix();
 }
glPopMatrix();
glPushMatrix();
glColor3f(1,0.8,0.0);
glRotated(140,0,1,0);
glTranslated(3.65,-1.2,-2.4);
glScaled(0.5,0.2,0.15);
compound();
glPopMatrix();
glPushMatrix();
glColor3f(1,0.8,0.0);
glRotated(140,0,1,0);
glTranslated(0.35,-1.2,-2.4);
glScaled(0.5,0.2,0.15);
compound();
glPopMatrix();
glPushMatrix();//left arc
glColor3f(0.309804,0.184314,0.184314);
glTranslated(-2.5,-1.2,1.0);
glScaled(0.5,8,0.5);
glutSolidCube(0.2);
glPopMatrix();
glPushMatrix();//right arc
glColor3f(0.309804,0.184314,0.184314);
glTranslated(-3.65,-1.2,0.05);
glScaled(0.5,8,0.5);
glutSolidCube(0.2);
glPopMatrix();
glPushMatrix();// toparc
glColor3f(0.309804,0.184314,0.184314);
glTranslated(-3.05,-0.4,0.5);
glRotated(50,0,1,0);
glScaled(1,0.5,8);
glutSolidCube(0.2);
glPopMatrix();
/*glPushMatrix();
glTranslated(-3.05,-0.4,0.5);
glRotated(50,0,1,0);
glScaled(1,0.5,8);
glutSolidCube(0.2);
glPopMatrix();*/
glPushMatrix();//road
glColor3f(0.0,0.0,0.0);
glTranslated(-1.8,-1.7,-1.0);
glRotated(230,0,1,0);
glScaled(20,0.02,7);
glutSolidCube(0.2);
glPopMatrix();
glPopMatrix();
}
voiddrawwheel()
{
intnum=12;
GLUquadricObj *quadric=gluNewQuadric();
gluQuadricNormals(quadric, GLU_SMOOTH);
glPushMatrix();
//GLfloattwoModel[]={GL_FALSE};
//glLightModelfv(GL_LIGHT_MODEL_TWO_SIDE, twoModel);
//set_material(GWHEEL_RING);
glTranslatef(0.0,0.0, gw_width);
glRotatef(-gw_spin,0,0,1);
glColor3f(0.4,0.2,0);
//draw_cyl(0,0,0,0,-55,20,1.5,8);
glTranslatef(0.0,0.0, -gw_width*2);
//draw_cyl(0,0,0,0,-55,-20,1.5,8);
glTranslatef(0.0,0.0, gw_width*2);
glRotatef(gw_spin,0,0,1);
glutSolidTorus(1.0, 35.0, 16, 64);
//twoModel[0]=GL_TRUE;
//glLightModelfv(GL_LIGHT_MODEL_TWO_SIDE, twoModel);
gluDisk(quadric,0.0, 10.0, 10.0, 1);
glTranslatef(0.0,0.0, -gw_width*2);
glutSolidTorus(1.0, 35.0, 16, 64);
gluDisk(quadric,0.0, 10.0, 10.0, 1);
glTranslatef(0.0,0.0, gw_width);
//twoModel[0]=GL_FALSE;
//glLightModelfv(GL_LIGHT_MODEL_TWO_SIDE, twoModel);
for(int i=0; i<num; i++)
{
//glEnable(GL_LIGHTING);
glPushMatrix();
glRotatef(360*i/num, 0.0, 0.0, 1.0);
//glEnable(GL_DEPTH_TEST);
glTranslatef(0.0,0.0, gw_width);
glColor3f(0.6,0.6,0);
draw_cyl(0.0, 45.0, 0.0, 0.0, 45.0, -5.0, 1.0, 12);
draw_cyl(0.0, 45.0, 0.0, 0.0, 2.0, 0.0, 1.0, 12);
 glTranslatef(0.0,0.0, -gw_width*2);
draw_cyl(0.0, 45.0, 0.0, 0.0, 2.0, 0.0, 1.0, 12);
draw_cyl(0.0, 45.0, 0.0, 0.0, 45.0, 5.0, 1.0, 12);
glTranslatef(0.0,0.0, gw_width);
//glDisable(GL_LIGHTING);
glTranslatef(0.0, -45.0, 0.0);
glRotatef((-gw_spin-(360*i/num)-sin(gw_spin/10.0)*10.0)-theta, 0.0, 0.0, 1.0);
//set_material(GWHEEL_TROLLEY);
draw_wagon();
//set_material(GWHEEL_RING);
glTranslatef(0.0, 45.0, 0.0);
glPopMatrix();
}
set_material(0);
glPopMatrix();
glDisable(GL_LIGHT1);
}
void display()
{
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // Clear color and depth 
buffers
glMatrixMode(GL_MODELVIEW); // To operate on model-view matrix
 // Render a color-cube consisting of 6 quads with different colors
glLoadIdentity(); // Reset the model-view matrix
 //set the camera
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
glOrtho(-winHt*64/48.0,winHt*64/48.0,-winHt,winHt,0.1,100.0);
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
gluLookAt(50.0,1.3,50.0,0.0,0.25,0.0,0.0,100.0,0.0);
 //gluLookAt(2.3,1.3,2.0,0.0,-0.25,0.0,0.0,1.0,0.0);
// glTranslatef(1.5f, 0.0f, -7.0f); // Move right and into the screen
glRotatef(theta1[0], 1.0, 0.0, 0.0);
glRotatef(theta1[1], 1.0, 0.0, 0.0);
glRotatef(theta1[2], 0.0, 1.0, 0.0);
glRotatef(theta1[3], 0.0, 1.0, 0.0);
glPushMatrix();
glRotatef(50,0.0,0.8,0.0);
glScaled(1.5,1.3,1.5);
drawobject();
glPopMatrix();
glPushMatrix();
glRotated(100,0,01,0);
glRotatef(theta,0.0,0.0,1.0);
glTranslated(-0.0,0.0,-0.0);
glScaled(0.035,0.035,0.035);
drawwheel();
glPopMatrix();
glPushMatrix();
glRotated(100,0,01,0);
glTranslated(-0.0,-0.0,-0.0);
glScaled(0.024,0.050,0.024);
drawgwstand();
glPopMatrix();
glFlush();
glutSwapBuffers();
}
void keyboard(unsigned char key,intx,int y)
{
if(key=='w')
 {theta1[0] += 5.0;
if( theta1[0] > 45.0 ) theta1[0] -= 45.0;
display();
 }
else
if(key=='s')
 {theta1[0] -= 5.0;
if( theta1[0] > 45.0 || theta1[0] < -20 ) theta1[0] = 0.0;
display();
 }
else
if(key=='a')
 {theta1[2] -= 8.0;
if( theta1[2] > 360.0 ) theta1[2] -= 360.0;
display();
 }
else
if(key=='d')
 {theta1[3] += 8.0;
if( theta1[3] > 360.0 ) theta1[3] -= 360.0;
display();
 }
}
void mouse(intbtn,intstate,intx,int y)
{
if(btn==GLUT_LEFT_BUTTON&&state==GLUT_DOWN)winHt+=0.5;
if(btn==GLUT_RIGHT_BUTTON&&state==GLUT_DOWN)winHt-=0.5;
glutPostRedisplay();
}
/*constGLfloatlight_ambient[] = { 0.0f, 0.0f, 0.0f, 1.0f };
constGLfloatlight_diffuse[] = { 1.0f, 1.0f, 1.0f, 1.0f };
constGLfloatlight_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
constGLfloatlight_position[] = { 2.0f, 5.0f, 5.0f, 0.0f };
constGLfloatmat_ambient[] = { 0.7f, 0.7f, 0.7f, 1.0f };
constGLfloatmat_diffuse[] = { 0.8f, 0.8f, 0.8f, 1.0f };
constGLfloatmat_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
constGLfloathigh_shininess[] = { 100.0f };
*/
int main(intargc, char** argv)
{
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
glutInitWindowSize(1400,700);
glutInitWindowPosition(0,0);
glutCreateWindow(" Exhibition");
glutDisplayFunc(display);
glutKeyboardFunc(keyboard);
glutMouseFunc(mouse);
glEnable(GL_DEPTH_TEST);
glutIdleFunc(spin);
glEnable(GL_LIGHT0);
glEnable(GL_NORMALIZE);
glEnable(GL_COLOR_MATERIAL);
glEnable(GL_LIGHTING);
/* glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
glLightfv(GL_LIGHT0, GL_POSITION, light_position);
glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);*/
initGL();
glutMainLoop();
return 0;
}

